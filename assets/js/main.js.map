{"version":3,"file":"js/main.js","mappings":"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","sources":["webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/polyfills.js","webpack://nhs111-resources/./src/assets/js/modules/analytics/download-event.js","webpack://nhs111-resources/./src/assets/js/modules/analytics/outbound-links.js","webpack://nhs111-resources/./src/assets/js/modules/youtube.js","webpack://nhs111-resources/webpack/bootstrap","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/components/card/card.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/common.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/components/checkboxes/checkboxes.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/components/error-summary/error-summary.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/nhsuk.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/components/skip-link/skip-link.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/components/header/menuToggle.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/components/details/details.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/components/header/searchToggle.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/components/header/header.js","webpack://nhs111-resources/./node_modules/nhsuk-frontend/packages/components/radios/radios.js"],"sourcesContent":["/**\n * IE polyfill for NodeList.forEach()\n */\nif (!NodeList.prototype.forEach) {\n  NodeList.prototype.forEach = Array.prototype.forEach;\n}\n\n/**\n * IE polyfill for Array.includes()\n */\nif (!Array.prototype.includes) {\n  // eslint-disable-next-line no-extend-native\n  Object.defineProperty(Array.prototype, 'includes', {\n    enumerable: false,\n    value(obj) {\n      return this.filter((el) => el === obj).length > 0;\n    },\n  });\n}\n\n/**\n * IE polyfill for Element.closest()\n */\nif (!Element.prototype.matches) {\n  Element.prototype.matches =\n    Element.prototype.msMatchesSelector ||\n    Element.prototype.webkitMatchesSelector;\n}\n\nif (!Element.prototype.closest) {\n  Element.prototype.closest = function(s) {\n    var el = this;\n\n    do {\n      if (Element.prototype.matches.call(el, s)) return el;\n      el = el.parentElement || el.parentNode;\n    } while (el !== null && el.nodeType === 1);\n    return null;\n  };\n}\n","const downloadButtons = document.querySelectorAll(\"[download]\");\nif (downloadButtons) {\n  Array.from(downloadButtons).forEach((button) => {\n    button.addEventListener(\"click\", (e) => {\n      gtag(\"event\", \"click\", {\n        event_category: \"Download button\",\n        event_label: button.textContent,\n      });\n    });\n  });\n}\n","const externalLinks = document.querySelectorAll(\"[href^=http]\");\n\nif (externalLinks) {\n  Array.from(externalLinks).forEach((link) => {\n    link.addEventListener(\"click\", (e) => {\n      gtag(\"event\", \"click\", {\n        transport_type: \"beacon\",\n        event_category: \"outbound\",\n        event_label: link.getAttribute(\"href\"),\n        event_callback: function () {\n          document.location = link.getAttribute(\"href\");\n        },\n      });\n    });\n  });\n}\n","const videos = document.querySelectorAll(\"[data-youtube-id]\");\n\nconst tag = document.createElement(\"script\");\ntag.src = \"https://www.youtube.com/iframe_api\";\nconst firstScriptTag = document.getElementsByTagName(\"script\")[0];\nfirstScriptTag.parentNode.insertBefore(tag, firstScriptTag);\n\nfunction onPlayerStateChange(event) {\n  switch (event.data) {\n    case 1: // playing\n      gtag(\"event\", \"play\", {\n        event_category: \"YouTube\",\n        event_label: event.target.getVideoData().title,\n      });\n      break;\n\n    case 0: // ended\n      gtag(\"event\", \"ended\", {\n        event_category: \"YouTube\",\n        event_label: event.target.getVideoData().title,\n      });\n      break;\n\n    case 2: // paused\n      gtag(\"event\", \"paused\", {\n        event_category: \"YouTube\",\n        event_label: event.target.getVideoData().title,\n      });\n      break;\n\n    case -1: // unstarted\n    case 3: // buffering\n    case 5: // video cued\n    default:\n      // Discard events by default\n      // Written this way to make it easy to track more later\n      break;\n  }\n}\n\nfunction onYouTubeIframeAPIReady() {\n  if (videos) {\n    Array.from(videos).forEach((video, index) => {\n      const youtubeId = video.getAttribute(\"data-youtube-id\");\n      const youtubeTitle = video.getAttribute(\"data-youtube-title\");\n\n      const player = new YT.Player(video, {\n        height: \"390\",\n        width: \"640\",\n        videoId: youtubeId,\n        playerVars: {\n          playsinline: 1,\n        },\n        events: {\n          onStateChange: onPlayerStateChange,\n        },\n      });\n    });\n  }\n}\n\n// Need a global function for the youtube script to know how to call it\nwindow.onYouTubeIframeAPIReady = onYouTubeIframeAPIReady;\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","export default () => {\n  // Loops through dom and finds all elements with nhsuk-card--clickable class\n  document.querySelectorAll('.nhsuk-card--clickable').forEach((card) => {\n    // Check if card has a link within it\n    if (card.querySelector('a') !== null) {\n      // Clicks the link within the heading to navigate to desired page\n      card.addEventListener('click', () => {\n        card.querySelector('a').click();\n      });\n    }\n  });\n};\n","/**\n * Toggle a boolean attribute on a HTML element\n * @param {HTMLElement} element\n * @param {string} attr\n*/\nexport const toggleAttribute = (element, attr) => {\n  // Return without error if element or attr are missing\n  if (!element || !attr) return;\n  // Toggle attribute value. Treat no existing attr same as when set to false\n  const value = (element.getAttribute(attr) === 'true') ? 'false' : 'true';\n  element.setAttribute(attr, value);\n};\n\n/**\n * Toggle a toggle a class on conditional content for an input based on checked state\n * @param {HTMLElement} input input element\n * @param {string} className class to toggle\n*/\nexport const toggleConditionalInput = (input, className) => {\n  // Return without error if input or class are missing\n  if (!input || !className) return;\n  // If the input has conditional content it had a data-aria-controls attribute\n  const conditionalId = input.getAttribute('aria-controls');\n  if (conditionalId) {\n    // Get the conditional element from the input data-aria-controls attribute\n    const conditionalElement = document.getElementById(conditionalId);\n    if (conditionalElement) {\n      if (input.checked) {\n        conditionalElement.classList.remove(className);\n        input.setAttribute('aria-expanded', true);\n      } else {\n        conditionalElement.classList.add(className);\n        input.setAttribute('aria-expanded', false);\n      }      \n    }\n  }\n};\n","import { toggleConditionalInput } from '../../common';\n\n/**\n * Conditionally show content when a checkbox button is checked\n * Test at http://0.0.0.0:3000/components/checkboxes/conditional.html\n*/\nconst syncAllConditionalReveals = function syncAllConditionalReveals(input) {\n  const allInputsInForm = input.form.querySelectorAll('input[type=\"checkbox\"]');\n  allInputsInForm.forEach((item) => toggleConditionalInput(item, 'nhsuk-checkboxes__conditional--hidden'));\n};\n\n/**\n * Uncheck other checkboxes\n *\n * Find any other checkbox inputs with the checkbox group value, and uncheck them.\n * This is useful for when a “None of these\" checkbox is checked.\n */\nconst unCheckAllInputsExcept = function unCheckAllInputsExcept(input) {\n  const allInputsInSameExclusiveGroup = input.form.querySelectorAll(\n    `input[type=\"checkbox\"][data-checkbox-exclusive-group=\"${input.getAttribute('data-checkbox-exclusive-group')}\"]`\n  );\n\n  allInputsInSameExclusiveGroup.forEach((inputWithSameName) => {\n    const hasSameFormOwner = input.form === inputWithSameName.form;\n    if (hasSameFormOwner && inputWithSameName !== input) {\n      inputWithSameName.checked = false; // eslint-disable-line no-param-reassign\n    }\n  });\n\n  syncAllConditionalReveals(input);\n};\n\n/**\n * Uncheck exclusive inputs\n *\n * Find any checkbox inputs with the same checkbox group value and the 'exclusive' behaviour,\n * and uncheck them. This helps prevent someone checking both a regular checkbox and a\n * \"None of these\" checkbox in the same fieldset.\n */\nconst unCheckExclusiveInputs = function unCheckExclusiveInputs(input) {\n  const allExclusiveInputsInSameExclusiveGroup = input.form.querySelectorAll(\n    `input[type=\"checkbox\"][data-checkbox-exclusive][data-checkbox-exclusive-group=\"${input.getAttribute('data-checkbox-exclusive-group')}\"]`\n  );\n\n  allExclusiveInputsInSameExclusiveGroup.forEach((exclusiveInput) => {\n    const hasSameFormOwner = input.form === exclusiveInput.form;\n    if (hasSameFormOwner) {\n      exclusiveInput.checked = false; // eslint-disable-line no-param-reassign\n    }\n  });\n\n  syncAllConditionalReveals(input);\n};\n\nexport default () => {\n  // Checkbox input DOMElements inside a conditional form group\n  const checkboxInputs = document.querySelectorAll('.nhsuk-checkboxes .nhsuk-checkboxes__input');\n\n  /**\n   * Toggle classes and attributes\n   * @param {Object} event click event object\n  */\n  const handleClick = (event) => {\n    // Toggle conditional content based on checked state\n    toggleConditionalInput(event.target, 'nhsuk-checkboxes__conditional--hidden');\n\n    if (!event.target.checked) {\n      return;\n    }\n\n    // Handle 'exclusive' checkbox behaviour (ie \"None of these\")\n    if (event.target.hasAttribute('data-checkbox-exclusive')) {\n      unCheckAllInputsExcept(event.target);\n    } else {\n      unCheckExclusiveInputs(event.target);\n    }\n  };\n\n  // When the page is restored after navigating 'back' in some browsers the\n  // state of form controls is not restored until *after* the DOMContentLoaded\n  // event is fired, so we need to sync after the pageshow event in browsers\n  // that support it.\n  if ('onpageshow' in window) {\n    window.addEventListener('pageshow', () => checkboxInputs.forEach((input) => syncAllConditionalReveals(input)));\n  } else {\n    window.addEventListener('DOMContentLoaded', () => checkboxInputs.forEach((input) => syncAllConditionalReveals(input)));\n  }\n\n  // Although we've set up handlers to sync state on the pageshow or\n  // DOMContentLoaded event, init could be called after those events have fired,\n  // for example if they are added to the page dynamically, so sync now too.\n  checkboxInputs.forEach((input) => syncAllConditionalReveals(input));\n\n  // Attach handleClick as click to checkboxInputs\n  checkboxInputs.forEach((checkboxButton) => {\n    checkboxButton.addEventListener('change', handleClick);\n  });\n};\n","/**\n * Adapted from https://github.com/alphagov/govuk-frontend/blob/master/src/govuk/components/error-summary/error-summary.js\n */\n\n/**\n * Get associated legend or label\n *\n * Returns the first element that exists from this list:\n *\n * - The `<legend>` associated with the closest `<fieldset>` ancestor, as long\n *   as the top of it is no more than half a viewport height away from the\n *   bottom of the input\n * - The first `<label>` that is associated with the input using for='inputId'\n * - The closest parent `<label>`\n */\nfunction getAssociatedLegendOrLabel(input) {\n  const fieldset = input.closest('fieldset');\n\n  if (fieldset) {\n    const legends = fieldset.getElementsByTagName('legend');\n\n    if (legends.length) {\n      const candidateLegend = legends[0]; // eslint-disable-line prefer-destructuring\n\n      // If the input type is radio or checkbox, always use the legend if there\n      // is one.\n      if (input.type === 'checkbox' || input.type === 'radio') {\n        return candidateLegend;\n      }\n\n      // For other input types, only scroll to the fieldset’s legend (instead of\n      // the label associated with the input) if the input would end up in the\n      // top half of the screen.\n      //\n      // This should avoid situations where the input either ends up off the\n      // screen, or obscured by a software keyboard.\n      const legendTop = candidateLegend.getBoundingClientRect().top;\n      const inputRect = input.getBoundingClientRect();\n\n      // If the browser doesn't support Element.getBoundingClientRect().height\n      // or window.innerHeight (like IE8), bail and just link to the label.\n      if (inputRect.height && window.innerHeight) {\n        const inputBottom = inputRect.top + inputRect.height;\n\n        if (inputBottom - legendTop < window.innerHeight / 2) {\n          return candidateLegend;\n        }\n      }\n    }\n  }\n\n  return (\n    document.querySelector(`label[for='${input.getAttribute('id')}']`)\n    || input.closest('label')\n  );\n}\n\n/**\n * Focus the target element\n *\n * By default, the browser will scroll the target into view. Because our labels\n * or legends appear above the input, this means the user will be presented with\n * an input without any context, as the label or legend will be off the top of\n * the screen.\n *\n * Manually handling the click event, scrolling the question into view and then\n * focussing the element solves this.\n *\n * This also results in the label and/or legend being announced correctly in\n * NVDA - without this only the field type is announced\n * (e.g. 'Edit, has autocomplete').\n */\nfunction focusTarget(target) {\n  // If the element that was clicked was not a link, return early\n  if (target.tagName !== 'A' || target.href === false) {\n    return false;\n  }\n\n  const input = document.querySelector(target.hash);\n  if (!input) {\n    return false;\n  }\n\n  const legendOrLabel = getAssociatedLegendOrLabel(input);\n  if (!legendOrLabel) {\n    return false;\n  }\n\n  // Scroll the legend or label into view *before* calling focus on the input to\n  // avoid extra scrolling in browsers that don't support `preventScroll` (which\n  // at time of writing is most of them...)\n  legendOrLabel.scrollIntoView();\n  input.focus({ preventScroll: true });\n\n  return true;\n}\n\n/**\n * Handle click events on the error summary\n */\nfunction handleClick(event) {\n  if (focusTarget(event.target)) {\n    event.preventDefault();\n  }\n}\n\nexport default ({ focusOnPageLoad = true } = {}) => {\n  // Error summary component\n  const errorSummary = document.querySelector('.nhsuk-error-summary');\n\n  if (errorSummary) {\n    // Focus error summary component if it exists\n\n    if (focusOnPageLoad) {\n      errorSummary.focus();\n    }\n    errorSummary.addEventListener('click', handleClick);\n  }\n};\n","// Components\nimport Card from './components/card/card';\nimport Checkboxes from './components/checkboxes/checkboxes';\nimport Details from './components/details/details';\nimport ErrorSummary from './components/error-summary/error-summary';\nimport Header from './components/header/header';\nimport Radios from './components/radios/radios';\nimport SkipLink from './components/skip-link/skip-link';\n\nimport './polyfills';\n\n// Initialize components\ndocument.addEventListener('DOMContentLoaded', () => {\n  Card();\n  Checkboxes();\n  Details();\n  ErrorSummary();\n  Header();\n  Radios();\n  SkipLink();\n});\n","/*\n * NHS.UK skip link.\n *\n * When using VoiceOver on iOS, focus remains on the skip link anchor\n * when elected so the next focusable element is not at the jumped to area.\n */\n\nexport default () => {\n  // Assign required DOM elements\n  const heading = document.querySelector('h1');\n  const skipLink = document.querySelector('.nhsuk-skip-link');\n\n  const addEvents = () => {\n    // Add tabindex = -1 and apply focus to heading on skip link click\n    skipLink.addEventListener('click', (event) => {\n      event.preventDefault();\n      heading.setAttribute('tabIndex', '-1');\n      heading.focus();\n    });\n    // Remove tabindex from heading on blur\n    heading.addEventListener('blur', (event) => {\n      event.preventDefault();\n      heading.removeAttribute('tabIndex');\n    });\n  };\n\n  if (heading && skipLink) addEvents();\n};\n","import { toggleAttribute } from '../../common';\n\n/**\n * Handle menu show and hide for mobile\n*/\nexport default () => {\n  // HTMLElements\n  const toggleButton = document.querySelector('#toggle-menu');\n  const closeButton = document.querySelector('#close-menu');\n  const nav = document.querySelector('#header-navigation');\n\n  /**\n   * Toggle classes and attributes\n   * @param {Object} event click event object\n  */\n  const toggleMenu = (event) => {\n    event.preventDefault();\n    // Toggle aria-expanded for accessibility\n    toggleAttribute(toggleButton, 'aria-expanded');\n    // Toggle classes to apply CSS\n    toggleButton.classList.toggle('is-active');\n    nav.classList.toggle('js-show');\n  };\n\n  // Check all necessary HTMLElements exist\n  if (toggleButton && closeButton && nav) {\n    // Attach toggleMenu as click to any elements which need it\n    [toggleButton, closeButton].forEach((elem) => {\n      elem.addEventListener('click', toggleMenu);\n    });\n  }\n};\n","import { toggleAttribute } from '../../common';\n\n/**\n * Ensure details component is cross browser and accessible\n * Test at http://0.0.0.0:3000/components/details/index.html\n*/\n\nexport default () => {\n  // Does the browser support details component\n  const nativeSupport = typeof document.createElement('details').open === 'boolean';\n  if (nativeSupport) {\n    return;\n  }\n\n  // Nodelist of all details elements\n  const allDetails = document.querySelectorAll('details');\n\n  /**\n   * Adds all necessary functionality to a details element\n   * @param {HTMLElement} element details element to initialise\n   * @param {number} index number to be appended to dynamic IDs\n  */\n  const initDetails = (element, index) => {\n    // Set details element as polyfilled to prevent duplicate events being added\n    element.setAttribute('nhsuk-polyfilled', 'true');\n\n    // Give details element an ID if it doesn't already have one\n    if (!element.id) element.setAttribute('id', `nhsuk-details${index}`);\n\n    // Set content element and give it an ID if it doesn't already have one\n    const content = document.querySelector(`#${element.id} .nhsuk-details__text`);\n    if (!content.id) content.setAttribute('id', `nhsuk-details__text${index}`);\n\n    // Set summary element\n    const summary = document.querySelector(`#${element.id} .nhsuk-details__summary`);\n\n    // Set initial summary aria attributes\n    summary.setAttribute('role', 'button');\n    summary.setAttribute('aria-controls', content.id);\n    summary.setAttribute('tabIndex', '0');\n    const openAttr = element.getAttribute('open') !== null;\n    if (openAttr === true) {\n      summary.setAttribute('aria-expanded', 'true');\n      content.setAttribute('aria-hidden', 'false');\n    } else {\n      summary.setAttribute('aria-expanded', 'false');\n      content.setAttribute('aria-hidden', 'true');\n      content.style.display = 'none';\n    }\n\n    const toggleDetails = () => {\n      toggleAttribute(summary, 'aria-expanded');\n      toggleAttribute(content, 'aria-hidden');\n\n      content.style.display = content.getAttribute('aria-hidden') === 'true' ? 'none' : '';\n      if (element.hasAttribute('open')) {\n        element.removeAttribute('open');\n      } else {\n        element.setAttribute('open', 'open');\n      }\n    };\n\n    // Toggle details onclick\n    summary.addEventListener('click', toggleDetails);\n\n    // Call toggle details on enter and space key events\n    summary.addEventListener('keydown', (event) => {\n      if (event.keyCode === 13 || event.keyCode === 32) {\n        event.preventDefault();\n        summary.click();\n      }\n    });\n  };\n\n  // Initialise details for any new details element\n  if (allDetails.length) {\n    allDetails.forEach((element, index) => {\n      if (!element.hasAttribute('nhsuk-polyfilled')) initDetails(element, index);\n    });\n  }\n};\n","import { toggleAttribute } from '../../common';\n\n/**\n * Handle search show and hide for mobile\n*/\nexport default () => {\n  // HTMLElements\n  const toggleButton = document.querySelector('#toggle-search');\n  const closeButton = document.querySelector('#close-search');\n  const searchContainer = document.querySelector('#wrap-search');\n  const menuSearchContainer = document.querySelector('#content-header');\n\n  /**\n   * Toggle classes and attributes\n   * @param {Object} event click event object\n  */\n  const toggleSearch = (event) => {\n    event.preventDefault();\n    // Toggle aria-expanded for accessibility\n    toggleAttribute(toggleButton, 'aria-expanded');\n    // Toggle classes to apply CSS\n    toggleButton.classList.toggle('is-active');\n    searchContainer.classList.toggle('js-show');\n    menuSearchContainer.classList.toggle('js-show');\n  };\n\n  // Check all necessary HTMLElements exist\n  if (toggleButton && closeButton) {\n    // Attach toggleSearch as click to any elements which need it\n    [toggleButton, closeButton].forEach((elem) => {\n      elem.addEventListener('click', toggleSearch);\n    });\n  }\n};\n","import MenuToggle from './menuToggle';\nimport SearchToggle from './searchToggle';\n\nexport default () => {\n  MenuToggle();\n  SearchToggle();\n};\n","import { toggleConditionalInput } from '../../common';\n\n/**\n * Conditionally show content when a radio button is checked\n * Test at http://0.0.0.0:3000/components/radios/conditional.html\n*/\n\nexport default () => {\n  // Radio input HTMLElements inside a conditional form group\n  const radioInputs = document.querySelectorAll('.nhsuk-radios--conditional .nhsuk-radios__input');\n\n  /**\n   * Update all conditional reveals to match checked state\n  */\n  const syncAllConditionalReveals = () => {\n    radioInputs.forEach((input) => toggleConditionalInput(input, 'nhsuk-radios__conditional--hidden'));\n  };\n\n  // When the page is restored after navigating 'back' in some browsers the\n  // state of form controls is not restored until *after* the DOMContentLoaded\n  // event is fired, so we need to sync after the pageshow event in browsers\n  // that support it.\n  if ('onpageshow' in window) {\n    window.addEventListener('pageshow', syncAllConditionalReveals);\n  } else {\n    window.addEventListener('DOMContentLoaded', syncAllConditionalReveals);\n  }\n\n  // Although we've set up handlers to sync state on the pageshow or\n  // DOMContentLoaded event, init could be called after those events have fired,\n  // for example if they are added to the page dynamically, so sync now too.\n  syncAllConditionalReveals();\n\n  // Attach event handler to radioInputs\n  radioInputs.forEach((radioButton) => {\n    radioButton.addEventListener('change', syncAllConditionalReveals);\n  });\n};\n"],"names":["NodeList","prototype","forEach","Array","includes","Object","defineProperty","enumerable","value","obj","this","filter","el","length","Element","matches","msMatchesSelector","webkitMatchesSelector","closest","s","call","parentElement","parentNode","nodeType","downloadButtons","document","querySelectorAll","from","button","addEventListener","e","gtag","event_category","event_label","textContent","externalLinks","link","transport_type","getAttribute","event_callback","location","videos","tag","createElement","src","firstScriptTag","getElementsByTagName","onPlayerStateChange","event","data","target","getVideoData","title","insertBefore","window","onYouTubeIframeAPIReady","video","index","youtubeId","YT","Player","height","width","videoId","playerVars","playsinline","events","onStateChange","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","toggleAttribute","element","attr","setAttribute","toggleConditionalInput","input","className","conditionalId","conditionalElement","getElementById","checked","classList","remove","add","syncAllConditionalReveals","form","item","handleClick","tagName","href","querySelector","hash","legendOrLabel","fieldset","legends","candidateLegend","type","legendTop","getBoundingClientRect","top","inputRect","innerHeight","getAssociatedLegendOrLabel","scrollIntoView","focus","preventScroll","focusTarget","preventDefault","heading","skipLink","toggleButton","closeButton","nav","toggleMenu","card","click","checkboxInputs","hasAttribute","inputWithSameName","exclusiveInput","unCheckExclusiveInputs","checkboxButton","Checkboxes","open","allDetails","id","content","summary","style","display","removeAttribute","keyCode","initDetails","Details","focusOnPageLoad","errorSummary","ErrorSummary","toggle","elem","searchContainer","menuSearchContainer","toggleSearch","SearchToggle","radioInputs","radioButton","Radios"],"sourceRoot":""}